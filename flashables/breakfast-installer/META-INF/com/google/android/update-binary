#!/sbin/sh -x

# Breakfast Kernel Installer.
# Copyright (C) 2017-2018, Alex Saiko <solcmdr@gmail.com>
#
# This product includes code parts from The Normandy Project.
# Copyright (C) 2017, Kutep0v.
#
# This product includes software developed at
# The Coding Code Mobile Technology LLC (http://www.supersu.com/). 
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

OUTFD=$2
ZIP=$3

BREAKFAST="/breakfast"
INITRAMFS="$BREAKFAST/initramfs"
BF_KERNEL="$BREAKFAST/kernel"
BF_TOOLS="$BF_KERNEL/tools"
BF_THERMAL="$BF_KERNEL/thermal"
BF_RAMPARTS="$BF_KERNEL/ramparts"

ui_print() { printf "ui_print $1\nui_print\n" >> /proc/self/fd/$OUTFD; }

is_mounted()
{
	[ ! -z "$2" ] &&
	cat /proc/mounts | grep $1 | grep $2, >/dev/null ||
	cat /proc/mounts | grep $1 >/dev/null

	return $?
}

terminate()
{
	# Make a proper cleanup
	cd / && rm -rf $BREAKFAST
	(is_mounted /system) && umount /system

	case "$1" in
	0) msg="- Done!";;
	1) msg="- ! This kernel is compatible with $TARGET only";;
	2) msg="- ! This kernel is not compatible with your ROM";;
	3) msg="- ! Failed to find a boot block";;
	4) msg="- ! Failed to dump a boot block";;
	5) msg="- ! Failed to write a new boot block";;
	*) msg="- ! Internal error occured";;
	esac

	[ "$1" -eq "0" ] || ui_print " "
	ui_print "$msg"
	ui_print " "

	exit $1
}

mount_system()
{
	# There is no point in remounting the already mounted system
	(is_mounted /system rw) && return 0

	mount -o rw /system
	mount -o rw,remount /system

	(is_mounted /system rw) && return 0

	# If generic calls didn't help, try to mount system meticulously
	for i in $(cat /etc/recovery.fstab | grep -v "#" | grep "/system"); do
		[ -z "$POINT" ] && POINT=$i && continue
		[ -z "$FS" ] && FS=$i && continue
		[ -z "$DEV" ] && DEV=$i && break
	done

	[ ! -z "$POINT" ] && [ ! -z "$FS" ] && [ ! -z "$DEV" ] && (
	(! is_mounted /system rw) && mount -t $FS -o rw $DEV $POINT
	(! is_mounted /system rw) && mount -t $FS -o rw,remount $DEV $POINT)
	[ "$?" -eq "0" ] && (is_mounted /system rw) || terminate "121"
}

init_installation()
{
	rm -rf $BREAKFAST && mkdir -p $INITRAMFS && cd $BREAKFAST
	unzip -o "$ZIP"

	[ -r $BF_KERNEL/config.sh ] &&
	source $BF_KERNEL/config.sh || terminate "121"

	[ ! -z $TARGET ] && [ ! -z $KERNEL_IMAGE ] &&
	[ ! -z $API_LOWER ] && [ ! -z $API_UPPER ] &&
	[ ! -z $MPDECISION ] && [ ! -z $THERMAL_ENGINE ] &&
	[ ! -z $THERMAL_CONFIG ] && [ ! -z $POWER_HAL ] || terminate "121"

	for file in unpack mk; do chmod 0750 $BF_TOOLS/${file}bootimg; done
	[ "$?" -eq "0" ] || terminate "121"
}

check_model_id()
{
	HW=$(getprop "ro.product.device")
	[ "$?" -eq "0" ] || terminate "121"

	HW_NAME=$(getprop "ro.product.model")
	[ "$?" -eq "0" ] || terminate "121"

	[ "$HW" == "$TARGET" ] || terminate "1"
	ui_print "- Model ID - $HW_NAME ($HW)"
}

check_compatibility()
{
	mount_system
	for file in $MPDECISION $THERMAL_ENGINE; do
		[ -f "$file" ] || terminate "2"
	done

	[ -f "$POWER_HAL" ] ||
	(ui_print "- ! PowerHAL is not found" &&
	 ui_print "- ! Kernel may not work properly")

	API=$(cat /system/build.prop | grep "ro.build.version.sdk=" | \
	      dd bs=1 skip=21 count=2)
	[ "$?" -eq "0" ] || terminate "121"
	(is_mounted /system) && umount /system

	[ "$API" -ge "$API_LOWER" ] && [ "$API" -le "$API_UPPER" ] ||
	terminate "2"
}

dump_boot_image()
{
	BOOTIMAGE=$(grep -v '#' /etc/recovery.fstab |	\
		    grep -E '/boot[^a-zA-Z]' |		\
		    grep -oE '/dev/[a-zA-Z0-9_./-]*')
	[ ! -z $BOOTIMAGE ] || terminate "3"

	/sbin/busybox dd if="$BOOTIMAGE" of="$BREAKFAST/boot.img"
	[ "$?" == "0" ] || terminate "4"

	$BF_TOOLS/unpackbootimg -i "$BREAKFAST/boot.img" -o "$BREAKFAST"
}

put_into_initramfs()
{
	[ -f $BF_RAMPARTS/$1 ] && [ ! -z $2 ] && [ ! -z $3 ] || return 1
	mv -f $BF_RAMPARTS/$1 $INITRAMFS/$2 && chmod $3 $INITRAMFS/$2
}

prepare_initramfs()
{
	rm -rf $INITRAMFS && mkdir $INITRAMFS && cd $INITRAMFS

	mv $BREAKFAST/boot.img-ramdisk.gz . &&
	gunzip -c boot.img-ramdisk.gz | cpio -i && rm boot.img-ramdisk.gz

	P=""
	[ "$API" -ge "24" ] && [ "$API" -le "25" ] && P="_n" &&
	ui_print "- ! Android Nougat Compatibility Mode"

	put_into_initramfs "init.${TARGET}$P.rc" "init.$TARGET.rc" "750"
	put_into_initramfs "fstab.$TARGET" "fstab.$TARGET" "640"

	find . | cpio -o -H newc | gzip > $BREAKFAST/boot.img-ramdisk.gz
	cd $BREAKFAST && rm -rf $INITRAMFS
}

create_boot_image()
{
	COMMAND_LINE="
	$BF_TOOLS/mkbootimg						  \
	--kernel		\"$BF_KERNEL/$KERNEL_IMAGE\"		  \
	--ramdisk		\"$BREAKFAST/boot.img-ramdisk.gz\"	  \
	--cmdline		\"$(cat $BREAKFAST/boot.img-cmdline)\"	  \
	--board			\"$(cat $BREAKFAST/boot.img-board)\"	  \
	--base			\"$(cat $BREAKFAST/boot.img-base)\"	  \
	--pagesize		\"$(cat $BREAKFAST/boot.img-pagesize)\"	  \
	--kernel_offset		\"$(cat $BREAKFAST/boot.img-kerneloff)\"  \
	--ramdisk_offset	\"$(cat $BREAKFAST/boot.img-ramdiskoff)\" \
	--second_offset		\"$(cat $BREAKFAST/boot.img-secondoff)\"  \
	--tags_offset		\"$(cat $BREAKFAST/boot.img-tagsoff)\"	  \
	--hash			\"$(cat $BREAKFAST/boot.img-hash)\"	  \
	--output		\"$BREAKFAST/breakfast.img\""

	printf "#!/sbin/sh\n$COMMAND_LINE" > $BREAKFAST/createnewboot.sh
	chmod 750 $BREAKFAST/createnewboot.sh && $BREAKFAST/createnewboot.sh
}

install_kernel()
{
	/sbin/busybox dd if="$BREAKFAST/breakfast.img" of="$BOOTIMAGE"
	[ "$?" == "0" ] || terminate "5"
}

replace_thermal_config()
{
	TCFG=$(printf "$THERMAL_CONFIG" 2>/dev/null | sed 's/.*\///g')
	[ ! -z $TCFG ] || return 1

	mount_system
	ui_print "- Replacing thermal config..."

	mv -f $BF_THERMAL/$TCFG $THERMAL_CONFIG 2>/dev/null
	[ ! -z $THERMAL_CONFIG ] || return 1

	chown 0:0 $THERMAL_CONFIG
	chmod 0644 $THERMAL_CONFIG
	chcon "u:object_r:system_file:s0" $THERMAL_CONFIG

	(is_mounted /system) && umount /system
}

init_installation

ui_print " "
ui_print "----- Breakfast Kernel"
ui_print "--- Device: $TARGET"
ui_print " "

ui_print "- Checking Model ID..."
check_model_id

ui_print "- Checking compatibility..."
check_compatibility

ui_print "- Dumping current boot image..."
dump_boot_image

ui_print "- Preparing initramfs..."
prepare_initramfs

ui_print "- Generating new boot image..."
create_boot_image

ui_print "- Installing kernel..."
install_kernel

# Try to replace thermal configuration if there is any
replace_thermal_config

# All the work is done. Terminating for now.
terminate "0"
